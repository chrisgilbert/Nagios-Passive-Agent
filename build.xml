<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="npa" default="default" basedir="." xmlns:j2seproject3="http://www.netbeans.org/ns/j2se-project/3">
    <description>Builds, tests, and runs the project npa.</description>
    <import file="nbproject/build-impl.xml"/>

    <import file="nbproject/profiler-build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>
    <import file="nbproject/management-build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>

  <target depends="init,compile-test,-pre-test-run" if="have.tests" name="-do-test-run">
        <j2seproject3:junit testincludes="**/*Test.class"/>
    </target>

    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-do-test-run-single">
        <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
        <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpath="${javac.classpath}"/>
        <groovy>
            properties."test.includes.class" = properties."test.includes".split("\\.")[0] + ".class"
        </groovy>
        <j2seproject3:junit excludes="" includes="${test.includes.class}"/>
    </target>

    <target name="-init-macrodef-junit">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <sequential>
                <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${build.test.classes.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
                            <filename name="@{testincludes}"/>
                        </fileset>
                    </batchtest>
                    <classpath>
                        <path path="${run.test.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg line="${run.jvmargs}"/>
                </junit>
            </sequential>
        </macrodef>
    </target>

       <macrodef name="javac" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute name="srcdir" default="${src.src.dir}"/>
            <attribute name="destdir" default="${build.classes.dir}"/>
            <attribute name="classpath" default="${javac.classpath}"/>
            <attribute name="includes" default="${includes}"/>
            <attribute name="excludes" default="${excludes}"/>
            <attribute name="debug" default="${javac.debug}"/>
            <attribute name="sourcepath" default="${empty.dir}"/>
            <attribute name="gensrcdir" default="${empty.dir}"/>
            <attribute default="${javac.processorpath}" name="processorpath"/>
            <attribute default="${build.generated.sources.dir}/ap-source-output" name="apgeneratedsrcdir"/>


            <element name="customize" optional="true"/>
            <sequential>
                <taskdef name="groovyc" classpath="${javac.classpath}" classname="org.codehaus.groovy.ant.Groovyc"/>
                <property name="empty.dir" location="${build.dir}/empty"/>
                <mkdir dir="${empty.dir}"/>
                <groovyc srcdir="@{srcdir}" sourcepath="@{sourcepath}" destdir="@{destdir}" encoding="${source.encoding}" includes="@{includes}" excludes="@{excludes}" includeAntRuntime="false">
                    <src>
                        <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                            <include name="*"/>
                        </dirset>
                    </src>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <javac debug="@{debug}" deprecation="${javac.deprecation}" encoding="${source.encoding}" source="${javac.source}" target="${javac.target}">
                        <compilerarg line="${javac.compilerargs} ${javac.compilerargs.jaxws}"/>
                        <customize/>
                    </javac>
                </groovyc>
            </sequential>
        </macrodef>

    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="npa-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

     <target name="-post-clean">
        <exec executable="rm">
        <arg value="-r"/>
        <arg value="${dist.dir}"/>
        </exec>
     </target>

 <!--
    <target name="-post-test-run">
 <junit dir="${work.dir}" errorproperty="tests.failed"
 failureproperty="tests.failed" fork="true"
 showoutput="true">
   <batchtest todir="${build.test.results.dir}">
     <fileset dir="${build.test.classes.dir}">
       <include name="**/*Test.class"/>
       <exclude name="**/*$*"/>
     </fileset>
   </batchtest>
   <classpath>
     <path path="${run.test.classpath}"/>
   </classpath>
   <syspropertyset>
     <propertyref prefix="test-sys-prop."/>
     <mapper from="test-sys-prop.*" to="*" type="glob"/>
   </syspropertyset>
   <formatter type="brief" usefile="false"/>
   <formatter type="xml"/>
   <jvmarg line="${run.jvmargs}"/>
 </junit>

 <mkdir dir="${build.test.results.dir}/../report"/>
 <mkdir dir="${build.test.results.dir}/../report/html"/>

 <junitreport todir="${build.test.results.dir}/../report">
   <fileset dir="${build.test.results.dir}">
     <include name="TEST-*.xml"/>
   </fileset>
   <report format="frames"
     todir="${build.test.results.dir}/../report/html"/>
 </junitreport>
</target>

-->

<target name="copy-common-files" depends="jar" description="copy files common to dists">

    <mkdir dir="${dist.dir}/logs"/>

    <copy todir="${dist.dir}/install/">
        <fileset dir="${dist.dir}/../install" />
    </copy>

    <copy todir="${dist.dir}/nagios-plugins/">
        <fileset dir="${dist.dir}/../nagios-plugins" />
    </copy>

    <copy todir="${dist.dir}/doc/">
        <fileset dir="${dist.dir}/../doc" />
    </copy>

    <copy todir="${dist.dir}/wrapper-lib/">
        <fileset dir="${dist.dir}/../wrapper-lib" />
    </copy>

    <copy todir="${dist.dir}/db/">
        <fileset dir="${dist.dir}/../db-dist" />
    </copy>

    <copy todir="${dist.dir}/bin/">
        <fileset dir="{dist.dir}/../bin" />
    </copy>

</target>



<target name="external-tar" depends="copy-common-files" description="build a tarball of the distribution">

    <mkdir dir="${dist.dir}/logs"/>
    
    <copy todir="${dist.dir}/config/">
        <fileset dir="${dist.dir}/../config-dist/" />
    </copy>

    <copy todir="${dist.dir}/config/samples/">
        <fileset dir="${dist.dir}/../config-dist/samples/" />
    </copy>

    <tar basedir="${dist.dir}" destfile="${dist.dir}/../tars/npa-${application.version}.tar.gz" compression="gzip"/>
</target>


<target name="corelogic-tar" depends="copy-common-files" description="build a tarball of the distribution for corelogic use">

    <copy todir="${dist.dir}/config/">
        <fileset dir="${dist.dir}/../config-dist-corelogic/" />
    </copy>
    
    <copy todir="${dist.dir}/config/samples/">
        <fileset dir="${dist.dir}/../config-dist-corelogic/samples/" />
    </copy>

    <tar basedir="${dist.dir}" destfile="${dist.dir}/../tars/npa-${application.version}-corelogic.tar.gz" compression="gzip"/>

</target>


<target name="external-zip" depends="external-tar" description="build a zip of the distribution for external use">
    <zip basedir="${dist.dir}" destfile="${dist.dir}/../zips/npa-${application.version}.zip"/>
</target>


<target name="corelogic-zip" depends="corelogic-tar" description="build a zip of the distribution for corelogic use">
    <zip basedir="${dist.dir}" destfile="${dist.dir}/../zips/npa-${application.version}-corelogic.zip"/>
</target>


<target name="build-all" depends="external-zip,corelogic-zip" description="build all distributions">
    <exec executable="echo">
        <arg value="Built all distributions"/>
    </exec>
</target>


<target name="release-internal" depends="corelogic-zip" description="release corelogic files">
    <exec executable="${dist.dir}/../release-internal.sh">
        <arg value="${dist.dir}/../tars/npa-${application.version}-corelogic.tar.gz"/>
    </exec>

    <exec executable="${dist.dir}/../release-internal.sh">
        <arg value="${dist.dir}/../zips/npa-${application.version}-corelogic.zip"/>
    </exec>
</target>

<target name="release-external" depends="external-zip" description="release external files">
    <exec executable="${dist.dir}/../release-external.sh">
        <arg value="${dist.dir}/../tars/npa-${application.version}.tar.gz"/>
    </exec>

    <exec executable="${dist.dir}/../release-external.sh">
        <arg value="${dist.dir}/../zips/npa-${application.version}.zip"/>
    </exec>
</target>



<target name="release-all" depends="release-external,release-internal" description="release all files">
    <exec executable="${dist.dir}/../release-internal.sh">
        <arg value="${dist.dir}/../tars/npa-${application.version}-corelogic.tar.gz"/>
    </exec>

    <exec executable="${dist.dir}/../release-internal.sh">
        <arg value="${dist.dir}/../zips/npa-${application.version}-corelogic.zip"/>
    </exec>

</target>



<target name="external-rpm" depends="external-tar" description="Build an NPA RPM">
<mkdir dir="${rpm.build.root}" />
<mkdir dir="${rpm.build.root}/SOURCES" />
<mkdir dir="${rpm.build.root}/SOURCES" />
<mkdir dir="${rpm.build.root}/SPECS" />
<mkdir dir="${rpm.build.root}/BUILD" />
<mkdir dir="${rpm.build.root}/RPMS" />
<mkdir dir="${rpm.build.root}/RPMS/noarch" />
<mkdir dir="${rpm.build.root}/SRPMS" />

<copy file="${dist.dir}/../tars/npa-${application.version}.tar.gz" todir="${rpm.build.root}/SOURCES"/>
<copy file="${build.dir}/../packaging/npa.spec" todir="${rpm.build.root}/SPECS"/>
<rpm specFile="npa.spec" topDir="${rpm.build.root}" command="-ba" failOnError="true" cleanBuildDir="true" />
</target>

<target name="-post-test-run-single">
<!-- Temp output the files to unit test for later regex -->
<echo
  message="${test.includes}"
  file="testIncludesModifiers.tmp"
/>

<!-- Use regex to filter out path information
      then replace .groovy with .class -->
<loadfile property="test.includes.classnames"
srcFile="testIncludesModifiers.tmp">
  <filterchain>
    <containsregex
      pattern="^.*\/(?=[a-zA-Z0-9]{0,99}\.groovy$)"
      replace=""/>
    <tokenfilter>
        <replacestring from=".groovy" to=".class"/>
    </tokenfilter>
  </filterchain>
</loadfile>
<delete file="testIncludesModifiers.tmp"/>

<!-- now run the junit test on the
    single class and spit out test results etc -->
<junit dir="${work.dir}" errorproperty="tests.failed"
failureproperty="tests.failed" fork="true" showoutput="true">
  <batchtest todir="${build.test.results.dir}">
    <fileset dir="${build.test.classes.dir}">
      <include name="**/${test.includes.classnames}"/>
      <exclude name="**/*$*"/>
    </fileset>
  </batchtest>
  <classpath>
      <path path="${run.test.classpath}"/>
  </classpath>
  <syspropertyset>
      <propertyref prefix="test-sys-prop."/>
      <mapper from="test-sys-prop.*" to="*" type="glob"/>
  </syspropertyset>
  <formatter type="brief" usefile="false"/>
  <formatter type="xml"/>
  <jvmarg line="${run.jvmargs}"/>
</junit>

<mkdir dir="${build.test.results.dir}/../report"/>
<mkdir dir="${build.test.results.dir}/../report/html"/>

<junitreport todir="${build.test.results.dir}/../report">
  <fileset dir="${build.test.results.dir}">
    <include name="TEST-*.xml"/>
  </fileset>
  <report format="frames"
  todir="${build.test.results.dir}/../report/html"/>
</junitreport>
</target>

<path id="root.dir">
  <fileset dir="${dist.dir}/..">
    <include name="**/*.jar" />
    </fileset>
</path>

<taskdef name="groovydoc" classname="org.codehaus.groovy.ant.Groovydoc" classpathref = "root.dir"/>
<groovydoc
    destdir="docs/gapi"
    sourcepath="src"
    packagenames="**.*"
    use="true"
    windowtitle="Nagios Passive Agent GroovyDocs"
    doctitle="Nagios Passive Agent GroovyDocs"
    header="Nagios Passive Agent GroovyDocs"
    private="false">
        <link packages="java.,org.xml.,javax.,org.xml." href="http://java.sun.com/j2se/1.5.0/docs/api"/>
        <link packages="org.apache.ant.,org.apache.tools.ant." href="http://www.dpml.net/api/ant/1.7.0"/>
        <link packages="org.junit.,junit.framework." href="http://junit.sourceforge.net/junit3.8.1/javadoc/"/>
        <link packages="groovy.,org.codehaus.groovy." href="http://groovy.codehaus.org/api/"/>
</groovydoc>


        
</project>


